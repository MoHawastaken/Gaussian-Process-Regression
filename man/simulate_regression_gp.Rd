% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulation.R
\name{simulate_regression_gp}
\alias{simulate_regression_gp}
\title{Simulation for Regression - Random ground truth}
\usage{
\preformatted{simulate_regression_gp(actual_cov, limits,
 observation_noise = function(x) 0, test_size = 300, training_size = 10,
 random_training = TRUE, show_pred = FALSE, ...) }
}
\arguments{
\item{actual_cov}{covariance function with which ground truth GP is generated}

\item{limits}{matrix containing the limits of the hyperrectangle}

\item{observation_noise}{function to generate the noise of the training data}

\item{test_size}{integer, number of test points at which ground truth and
fitted Gaussian process are compared}

\item{training_size}{integer, number of training points}

\item{random_training}{logical; if TRUEtraining points are to be drawn from
the uniform distribution on the hyperrectangle instead of being chosen
equispaced}

\item{show_pred}{logical; if TRUE the plot of the absolute prediction error
over the predicted variance is to be shown}

\item{...}{arguments passed on to the constructor of the Gaussian process}
}
\value{
\code{summary} of the absolute error of the Gaussian process
 predictions in the test points
}
\description{
Simulates Regression problems on a hyperrectangle of arbitrary dimension with
the ground truth drawn from a Gaussian process and analyzes the quality of the
Gaussian process fit.
}
\details{
\code{limits} should be a \eqn{D x 2} matrix to model a Gaussian process
in \eqn{\mathbb{R}^D}, the k-th line containing the lower and upper bound of
the hyperrectangle in the k-th dimension. The ground truth value at the test
points (an equispaced grid of \code{test_size} points in the hyperrectangle)
is randomly drawn from a multivariate distribution with mean 0 and the
covariance matrix determined by the covariance function \code{actual_cov}.
Then \code{training_size} training points are drawn randomly from this grid of
test points.

The noise function given in \code{observation_noise} determines the noise
which is added to the ground truth values at the training points before
Gaussian process regression is done. When called with the matrix of training
points, \code{observation_noise} is supposed to return a vector of length n,
containing the error. Suitable iid. noise functions can be created from
standard distributions with \code{iid_noise}. See the examples for an example
of non iid. noise.

The predictions of the Gaussian process at the test points are compared to the
ground truth. Before returning the \code{summary} of the absolute error in
these test points, \code{simulate_regression_gp} provides up to two plots. If
\code{show_pred = TRUE}, one plot shows the absolute error over the predicted
variance and, if \eqn{D = 1} another shows the ground truth GP and the
predictions of the fitted GP.
}
\examples{
simulate_regression_gp(cov_func(sqrexp, l = 1), limits = c(-5, 5), training_size = 10)

simulate_regression_gp(cov_func(rationalquadratic, alpha = 0.5, l = 1), 
 limits = c(-10, 10), observation_noise = iid_noise(rnorm, 0.2), 
  training_size = 50, noise = 0.2)

observation_noise <- function(X) {
 multivariate_normal(1, rep(0, ncol(X)),
        covariance_matrix(X, X, function(x,y) sqrexp(x, y, 0.1)))
}
simulate_regression_gp(cov_func(sqrexp, l = 1), limits = c(-5, 5), training_size = 10,
 observation_noise = observation_noise)
}
