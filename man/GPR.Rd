% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GPCclass.R, R/GPRclass.R
\docType{data}
\name{GPR}
\alias{GPR}
\alias{GPC}
\title{Predictions and Plots for Gaussian process regression}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
GPC

GPR
}
\description{
Implements a gaussian process and gives tools to predict and plot its values for given testpoints

Implements gaussian processes and gives tools for gaussian process regression and classification problems for given testpoints including clear plots of the results.
}
\section{Usage}{
 

\preformatted{GPR <- GPR$new(X, y, cov_Fun, noise)


GPR$predict(X*)
GPR$plot(testpoints)
}

 
\preformatted{GPR <- GPR$new(X, y, cov_fun, noise)


GPR$predict(X*)
GPR$plot(testpoints)
}
}

\section{Arguments}{


  \code{X} matrix of inputs

  \code{y} numeric vector of targets

  \code{cov_Fun} the predicted covarianz function of the gaussian process

  \code{noise} the predicted noise of the observations

  \code{X*} a numeric vector as the test input

  \code{testpoints} a matrix of testpoints



  \code{X} matrix of inputs

  \code{y} numeric vector of targets

  \code{cov_fun} the chosen covariance function of the gaussian process

  \code{noise} the inflicted noise of the observations

  \code{X*} a numeric vector as the test input

  \code{testpoints} a matrix of testpoints
}

\section{Methods}{


\code{$predict()} returns a numeric vector of the expected value of the underlying function f and their variance for the test input

\code{$plot()} displays the results of the predict function for all testpoints in a nice plot


\code{$predict()} returns a numeric vector of the expected value of the underlying function f and its variance for the test input

\code{$plot()} displays the results of the \code{predict} function for all testpoints and confidence regions of two standard deviations in a transparent plot


GPR has several subclasses where a covariance function k(x,y) is given. The following subclasses are implemented:

\code{GPR <- GPR.constant$new(X, y, c, noise)} with \code{k(x,y) = c}

\code{GPR <- GPR.linear$new(X, y, cov_Fun, noise)} with \code{k(x,y) = sum(sigma * x * y)}

\code{GPR <- GPR.polynomial$new(X, y, sigma, p, noise)} with \code{k(x,y) = (x \%*\% y + sigma)^p}

\code{GPR <- GPR.sqrexp$new(X, y, l, noise)} with \code{k(x,y) = exp(-dist(rbind(x, y))^2/(2 * l^2))}

\code{GPR <- GPR.gammaexp$new(X, y, gamma, l, noise)} with \code{k(x,y) = exp(-(dist(rbind(x, y)) / l) ^ gamma)}

\code{GPR <- GPR.rationalquadratic$new(X, y, alpha, l, noise)} with \code{k(x,y) = (1 + dist(rbind(x, y))^2 / (2 * alpha * l^2))^(-alpha)}
}

\section{Subclasses}{


GPR has several subclasses where a covarianz function k(x,y) is given. The following subclasses are implemented

\code{GPR <- GPR.constant$new(X, y, c, noise)} with \code{k(x,y) = c}

\code{GPR <- GPR.linear$new(X, y, sigma, noise)} with \code{k(x,y) = sum(sigma * x * y)}

\code{GPR <- GPR.polynomial$new(X, y, sigma, p, noise)} with \code{k(x,y) = (x \%*\% y + sigma)^p}

\code{GPR <- GPR.sqrexp$new(X, y, l, noise)} with \code{k(x,y) = exp(-dist(rbind(x, y))^2/(2 * l^2))}

\code{GPR <- GPR.gammaexp$new(X, y, gamma, l, noise)} with \code{k(x,y) = exp(-(dist(rbind(x, y)) / l) ^ gamma)}

\code{GPR <- GPR.rationalquadratic$new(X, y, alpha, l, noise)} with \code{k(x,y) = (1 + dist(rbind(x, y))^2 / (2 * alpha * l^2))^(-alpha)}


}

\section{Details}{

If own covariance functions are used with GPR, they need to be vectorized.
}

\examples{
Hier Beispiele einfügen


Hier Beispiele einfügen


}
\keyword{datasets}
