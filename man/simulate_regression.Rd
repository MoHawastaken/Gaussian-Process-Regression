% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulation.R
\name{simulate_regression}
\alias{simulate_regression}
\title{Simulation for Regression - Deterministic ground truth}
\usage{
\preformatted{simulate_regression(func, limits, training_points,
 training_size = 10L, observation_noise = function(x) 0, test_size = 10000L,
 ...) }
}
\arguments{
\item{func}{regression function}

\item{limits}{matrix containing the limits of the hyperrectangle}

\item{training_points}{matrix of points inside the hyperrectangle; optional}

\item{training_size}{number of training points; unnecessary if training_points
are given}

\item{observation_noise}{function to generate the noise of the training data}

\item{test_size}{number of test points at which regression function and
Gaussian process are compared}

\item{show_pred}{logical determining if plot of absolute prediction error over
predicted variance is to be shown}

\item{...}{arguments passed on to the constructor of the Gaussian process}
}
\value{
\code{summary} of the absolute error of the Gaussian process
 predictions in the test points
}
\description{
Simulates Regression problems with arbitrary regression function on a
hyperrectangle of arbitrary dimension and analyzes the quality of the Gaussian
process fit.
}
\details{
When the regression function \code{func} is defined on a hyperrectangle in
\eqn{R^D}, limits has to be a \eqn{D x 2} matrix where the k-th line contains
the lower and upper bound of the hyperrectangle in the k-th dimension. If the
argument \code{training_points} is used, it should be a \eqn{D x n} matrix
with each column representing a training point. If \code{training_points} is
missing, \code{training_size} training points are drawn randomly from the
uniform distribution on the hyperrectangle determined by limits.

The noise function given in \code{observation_noise} determines the noise
which is added to the values of func at the training points before Gaussian
process regression is done. When called with the matrix of training points,
\code{observation_noise} is supposed to return a vector of length n,
containing the error. Suitable iid. noise functions can be created from
standard distributions with \code{iid_noise}. See the examples for an example
of non iid. noise.

The predictions of the Gaussian process are compared to the ground truth
(function values of func) on an equispaced grid of \code{test_size} points in
the hyperrectangle. Before returning the \code{summary} of the absolute error
in these test points, \code{simulate_regression} provides two plots. One of
the absolute error over the predicted variance and one of the regression
function \code{func} and the predictions of the Gaussian process. For some
inputs, the first plot may not be very informative. Setting \code{show_pred =
FALSE}, the first plot is not shown. If \eqn{D > 1}, the second plot is made
with respect to the first dimension, with all other variables fixed at the
middle of the their corresponding interval.
}
\examples{
f <- function(x) 0.1 * x^3
limits <- matrix(c(-6, 6), nrow = 1)
X <- matrix(seq(-5,5,by = 0.2), nrow = 1)
observation_noise <- iid_noise(rnorm, sd = 2)
simulate_regression(f, limits, X, observation_noise = observation_noise)

f <- function(x) sum(x)^2
limits <- c(-1, 1, -1, 1, -1, 1)
observation_noise <- iid_noise(rcauchy)
simulate_regression(f, limits, training_size = 10, observation_noise = observation_noise)

f <- function(x) 0.1 * sum(x^3)
limits <- matrix(c(-5, 5, -5, 5, -5, 5), ncol = 2, byrow = TRUE)
observation_noise <- function(X) {
 multivariate_normal(1, rep(0, ncol(X)), covariance_matrix(X, X, cov_func(sqrexp, l = 0.1)))
}
simulate_regression(f, limits, training_size = 10, observation_noise = observation_noise, noise = 1)

}
